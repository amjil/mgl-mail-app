(ns mgl-mail.services.mail
  (:require 
   ["package:enough_mail/enough_mail.dart" :as em]
   ["package:enough_mail_html/enough_mail_html.dart" :as emh]))
   
(defn mail-client 
  [email password]
  (let [config (await (em.Discover/discover email))]
    (if (nil? config)
      (dart:core/print (str "Unable to auto-discover settings for " email))
      (let [account (em.MailAccount/fromDiscoveredSettings
                     .name "my account" 
                     .userName "my account"
                     .email email 
                     .password password 
                     .config config)
            mail-client (em/MailClient account .isLogEnabled true)]
        mail-client))))

(def client (atom nil))

(defn set-mail-client 
  [email password]
  (reset! client (await (mail-client email password))))
        
(defn build-mime-message 
  [m from to]
  (let [builder (doto (em/MessageBuilder)
                  (-> .-from (set! from))
                  (-> .to (set! to))
                  (.addMultipartAlternative .plainText
                                            (emh.HtmlToPlainTextConverter/convert m)
                                            .htmlText
                                            m))]
    (.buildMimeMessage builder)))
    
(defn mail-inboxes
  [^em/MailClient client]
  ^#/(em/Tree em/Mailbox)
  (await (.listMailboxesAsTree client .createIntermediate false)))
  
(defn select-box
  [^em/MailClient client ^em/Mailbox box]
  (await (.selectMailbox client box)))
  
(defn select-inbox 
  [^em/MailClient client]
  (await (.selectInbox client)))
  
(defn fetch-messages 
  [^em/MailClient client page perpage]
  ^#/(List em/MimeMessage)
  (await (.fetchMessages client .count perpage .page page)))
  
(defn is-connected?
  [^em/MailClient client]
  (.-isConnected client))
  
(defn connect
  [^em/MailClient client]
  (await (.connect client)))
  
(defn reconnect 
  [^em/MailClient client]
  (await (.reconnect client)))
  
(defn disconnect 
  [^em/MailClient client]
  (await (.disconnect client)))