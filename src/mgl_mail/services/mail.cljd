(ns mgl-mail.services.mail
  (:require
   ["package:enough_mail/enough_mail.dart" :as em]
   ["package:enough_mail_html/enough_mail_html.dart" :as emh]
   ["package:flutter/widgets.dart" :as widgets]
   ["dart:convert" :as convert]
   [mgl-mail.states.global :refer [state]]
   [mgl-mail.services.pref :as pref]
   [mgl-mail.utils.util :as util]))

(defn discover-config 
  [email]
  (let [config (await (em.Discover/discover email))]
    config))

(defn mail-account
  [email password config]
  (let [account (em.MailAccount/fromDiscoveredSettings
                 .name email
                 .userName email
                 .email email
                 .password password
                 .config config)]
    account))
    
(defn mail-account-with-manual 
  [email password in-host out-host]
  (let [account (em.MailAccount/fromManualSettings 
                .name email
                .email email
                .password password
                .incomingHost in-host
                .outgoingHost out-host)]
    account))
    
(defn mail-account-with-default
  [params]
  (let [{email :email password :password
         in-host :in-host out-host :out-host
         :or {in-host (str "imap." (-> (clojure.string/split email #"@") last))
              out-host (str "smtp." (-> (clojure.string/split email #"@") last))}} params]
    (mail-account-with-manual email password in-host out-host)))
    
(defn save-account 
  [^em/MailAccount 
   account]
  (let [account-string (.toString account)]
    (pref/set-string "account" account-string)))

(defn get-account
  []
  (let [account-string (await (pref/get-string "account"))]
    (if (empty? account-string)
      nil
      (em.MailAccount/fromJson (convert/jsonDecode account-string)))))

(defn mail-client
  [account]
  (let [^em/MailClient
        mail-client (em/MailClient account .isLogEnabled true)]
    mail-client))

(defn save-account-to-local-storage
  [email password]
  (await
   (pref/set-string
    "account"
    (convert/jsonEncode {"email" email "password" password}))))

(defn get-account-from-local-storage
  []
  (convert/jsonDecode
   (await
    (pref/get-string :account))))

(defn build-mime-message
  [title m
   ^#/(List em/MailAddress) from
   ^#/(List em/MailAddress) to]
  (let [builder (doto (em/MessageBuilder)
                  (-> .from (set! from))
                  (-> .to (set! to))
                  (-> .subject (set! title))
                  (.addMultipartAlternative .plainText
                                            (emh.HtmlToPlainTextConverter/convert m)
                                            .htmlText
                                            m))]
    (.buildMimeMessage builder)))

(defn mail-boxes
  [^em/MailClient client]
  (let [^#/(em/Tree em/Mailbox?)
        result (await (.listMailboxesAsTree client .createIntermediate false))]
    (swap! state assoc :mail-boxes (into [] (.-children (.-root result))))))

(defn select-box
  [^em/MailClient client ^em/Mailbox box]
  (await (.selectMailbox client box)))

(defn select-inbox
  [^em/MailClient client]
  (await (.selectInbox client)))

(defn fetch-messages
  [^em/MailClient client page perpage]
  (let [^#/(List em/MimeMessage)
        result (await (.fetchMessages client .page page .count perpage))]
    (swap! state assoc :mail-list (into [] result))))

(defn is-connected?
  [^em/MailClient client]
  (.-isConnected client))

(defn connect
  [^em/MailClient client]
  (await (.connect client)))

(defn reconnect
  [^em/MailClient client]
  (await (.reconnect client)))

(defn disconnect
  [^em/MailClient client]
  (await (.disconnect client)))
  
(defn send-message 
  [^em/MailClient client ^em/MimeMessage mime]
  (await (.sendMessage client mime)))
