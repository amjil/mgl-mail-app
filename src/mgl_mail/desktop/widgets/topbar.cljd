(ns mgl-mail.desktop.widgets.topbar
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:enough_mail/enough_mail.dart" :as em]
   [cljd.flutter :as f]
   [mgl-mail.services.editor :as edit]
   [mgl-mail.services.mail :as mail]
   [mgl-mail.states.global :refer [state]]))

(defn mail-detail
  []
  (f/widget
   :get [m/Navigator]
   (m/SafeArea .bottom false)
   (m/Row
    .mainAxisAlignment m.MainAxisAlignment/start
    .children
    [(m/IconButton
      .padding (m.EdgeInsets/all 10)
      .constraints (m/BoxConstraints)
      .onPressed (fn []
                   (.pop navigator))
      .icon (m/Icon m.Icons/arrow_back_ios_new))])))
      
(defn mail-list
  []
  (f/widget
   :get [m/Navigator]
   (m/SafeArea .bottom false)
   (m/Row
    .mainAxisAlignment m.MainAxisAlignment/spaceBetween
    .children
    [(m/IconButton
      .padding (m.EdgeInsets/all 10)
      .constraints (m/BoxConstraints)
      .onPressed (fn []
                   (.pop navigator))
      .icon (m/Icon m.Icons/arrow_back_ios_new))
     (m/IconButton
      .padding (m.EdgeInsets/all 10)
      .constraints (m/BoxConstraints)
      .onPressed (fn [] 
                   (.pushNamed navigator "/compose")
                   nil)
      .icon (m/Icon m.Icons/edit))])))
      
(defn mail-box
  []
  (f/widget
   :get [m/Navigator]
   (m/SafeArea .bottom false)
   (m/Row
    .mainAxisAlignment m.MainAxisAlignment/end
    .children
    [(m/IconButton
      .padding (m.EdgeInsets/all 10)
      .constraints (m/BoxConstraints)
      .onPressed (fn []
                   (.pushNamed navigator "/compose")
                   nil)
      .icon (m/Icon m.Icons/edit))])))

(defn compose 
  [title content to]
  (f/widget
   :get [m/Navigator]
   (m/SafeArea .bottom false)
   (m/Row
    .mainAxisAlignment m.MainAxisAlignment/spaceBetween
    .children
    [(m/IconButton
      .padding (m.EdgeInsets/all 10)
      .constraints (m/BoxConstraints)
      .onPressed (fn [] 
                   (.pop navigator)
                   nil)
      .icon (m/Icon m.Icons/arrow_back_ios_new))
     (m/Row
      .children [(m/IconButton
                  .padding (m.EdgeInsets/all 10)
                  .constraints (m/BoxConstraints)
                  .onPressed (fn [] 
                               (let [title @title
                                     content (edit/to-html (.-document content))
                                     email @to
                                     ^#/(List em/MailAddress)
                                     mail-address
                                     (into [] [(em/MailAddress
                                                (-> (clojure.string/split email #"@")
                                                    first)
                                                email)])
                                     mime (mail/build-mime-message title content mail-address)]
                                 (mail/append-message (:client @state) mime)
                                 (mail/send-message (:client @state) mime)))
                  .icon (m/Icon m.Icons/send))])])))
